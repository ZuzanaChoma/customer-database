#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Customer_Database_final
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CustomerDB")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CustomerDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchCustomers")]
		public ISingleResult<SearchCustomersResult> SearchCustomers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FistName", DbType="VarChar(50)")] string fistName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fistName, lastName);
			return ((ISingleResult<SearchCustomersResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZIPcode;
		
		private string _City1;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZIPcodeChanging(int value);
    partial void OnZIPcodeChanged();
    partial void OnCity1Changing(string value);
    partial void OnCity1Changed();
    #endregion
		
		public City()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPcode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZIPcode
		{
			get
			{
				return this._ZIPcode;
			}
			set
			{
				if ((this._ZIPcode != value))
				{
					this.OnZIPcodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPcode = value;
					this.SendPropertyChanged("ZIPcode");
					this.OnZIPcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="City", Storage="_City1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City1
		{
			get
			{
				return this._City1;
			}
			set
			{
				if ((this._City1 != value))
				{
					this.OnCity1Changing(value);
					this.SendPropertyChanging();
					this._City1 = value;
					this.SendPropertyChanged("City1");
					this.OnCity1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Customer", Storage="_Customers", ThisKey="ZIPcode", OtherKey="ZIPcode")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _FistName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _ZIPcode;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private int _SubscriptionID;
		
		private System.DateTime _DateJoined;
		
		private bool _Payed;
		
		private bool _Active;
		
		private EntityRef<City> _City;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFistNameChanging(string value);
    partial void OnFistNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZIPcodeChanging(int value);
    partial void OnZIPcodeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSubscriptionIDChanging(int value);
    partial void OnSubscriptionIDChanged();
    partial void OnDateJoinedChanging(System.DateTime value);
    partial void OnDateJoinedChanged();
    partial void OnPayedChanging(bool value);
    partial void OnPayedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Customer()
		{
			this._City = default(EntityRef<City>);
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FistName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FistName
		{
			get
			{
				return this._FistName;
			}
			set
			{
				if ((this._FistName != value))
				{
					this.OnFistNameChanging(value);
					this.SendPropertyChanging();
					this._FistName = value;
					this.SendPropertyChanged("FistName");
					this.OnFistNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPcode", DbType="Int NOT NULL")]
		public int ZIPcode
		{
			get
			{
				return this._ZIPcode;
			}
			set
			{
				if ((this._ZIPcode != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZIPcodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPcode = value;
					this.SendPropertyChanged("ZIPcode");
					this.OnZIPcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionID", DbType="Int NOT NULL")]
		public int SubscriptionID
		{
			get
			{
				return this._SubscriptionID;
			}
			set
			{
				if ((this._SubscriptionID != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIDChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionID = value;
					this.SendPropertyChanged("SubscriptionID");
					this.OnSubscriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateJoined", DbType="Date NOT NULL")]
		public System.DateTime DateJoined
		{
			get
			{
				return this._DateJoined;
			}
			set
			{
				if ((this._DateJoined != value))
				{
					this.OnDateJoinedChanging(value);
					this.SendPropertyChanging();
					this._DateJoined = value;
					this.SendPropertyChanged("DateJoined");
					this.OnDateJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payed", DbType="Bit NOT NULL")]
		public bool Payed
		{
			get
			{
				return this._Payed;
			}
			set
			{
				if ((this._Payed != value))
				{
					this.OnPayedChanging(value);
					this.SendPropertyChanging();
					this._Payed = value;
					this.SendPropertyChanged("Payed");
					this.OnPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Customer", Storage="_City", ThisKey="ZIPcode", OtherKey="ZIPcode", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ZIPcode = value.ZIPcode;
					}
					else
					{
						this._ZIPcode = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Customer", Storage="_Subscription", ThisKey="SubscriptionID", OtherKey="SubscriptionID", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._SubscriptionID = value.SubscriptionID;
					}
					else
					{
						this._SubscriptionID = default(int);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionID;
		
		private string _SubscriptionName;
		
		private string _SubscriptionPeriod;
		
		private System.Nullable<int> _Price;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIDChanging(int value);
    partial void OnSubscriptionIDChanged();
    partial void OnSubscriptionNameChanging(string value);
    partial void OnSubscriptionNameChanged();
    partial void OnSubscriptionPeriodChanging(string value);
    partial void OnSubscriptionPeriodChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    #endregion
		
		public Subscription()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubscriptionID
		{
			get
			{
				return this._SubscriptionID;
			}
			set
			{
				if ((this._SubscriptionID != value))
				{
					this.OnSubscriptionIDChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionID = value;
					this.SendPropertyChanged("SubscriptionID");
					this.OnSubscriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubscriptionName
		{
			get
			{
				return this._SubscriptionName;
			}
			set
			{
				if ((this._SubscriptionName != value))
				{
					this.OnSubscriptionNameChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionName = value;
					this.SendPropertyChanged("SubscriptionName");
					this.OnSubscriptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionPeriod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubscriptionPeriod
		{
			get
			{
				return this._SubscriptionPeriod;
			}
			set
			{
				if ((this._SubscriptionPeriod != value))
				{
					this.OnSubscriptionPeriodChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionPeriod = value;
					this.SendPropertyChanged("SubscriptionPeriod");
					this.OnSubscriptionPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Customer", Storage="_Customers", ThisKey="SubscriptionID", OtherKey="SubscriptionID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
	}
	
	public partial class SearchCustomersResult
	{
		
		private int _CustomerID;
		
		private string _FistName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _ZIPcode;
		
		private string _City;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _SubscriptionName;
		
		private string _SubscriptionPeriod;
		
		private int _SubscriptionID;
		
		private System.DateTime _DateJoined;
		
		private bool _Active;
		
		private bool _Payed;
		
		public SearchCustomersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this._CustomerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FistName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FistName
		{
			get
			{
				return this._FistName;
			}
			set
			{
				if ((this._FistName != value))
				{
					this._FistName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPcode", DbType="Int NOT NULL")]
		public int ZIPcode
		{
			get
			{
				return this._ZIPcode;
			}
			set
			{
				if ((this._ZIPcode != value))
				{
					this._ZIPcode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubscriptionName
		{
			get
			{
				return this._SubscriptionName;
			}
			set
			{
				if ((this._SubscriptionName != value))
				{
					this._SubscriptionName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionPeriod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubscriptionPeriod
		{
			get
			{
				return this._SubscriptionPeriod;
			}
			set
			{
				if ((this._SubscriptionPeriod != value))
				{
					this._SubscriptionPeriod = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionID", DbType="Int NOT NULL")]
		public int SubscriptionID
		{
			get
			{
				return this._SubscriptionID;
			}
			set
			{
				if ((this._SubscriptionID != value))
				{
					this._SubscriptionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateJoined", DbType="Date NOT NULL")]
		public System.DateTime DateJoined
		{
			get
			{
				return this._DateJoined;
			}
			set
			{
				if ((this._DateJoined != value))
				{
					this._DateJoined = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payed", DbType="Bit NOT NULL")]
		public bool Payed
		{
			get
			{
				return this._Payed;
			}
			set
			{
				if ((this._Payed != value))
				{
					this._Payed = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
